/**************************************************************************************************   
Apex Controller Name :  OSIS_CreditCardController
Version              :  1.0                                                                          
Created Date         :  Jul 16, 2018                                                           
Function             :  This class is used as controller class for Credit Card Lightning component.
Story                :                                    
***************************************************************************************************/
public class OSIS_CreditCardController {
    public static OSIS_PayPalResponse payRes = new OSIS_PayPalResponse();
    public static OSIS_PayPalResponse payResponse = new OSIS_PayPalResponse();
    
    /**************************************************************************************************
* method: validateCreditCard
* Description : Method to call paypal integration to validate and store the CC detials in paypal server
************************************************************************************************* */
    @AuraEnabled
    public static OSIS_PayPalResponse validateCreditCard(String quoteId,String fName,String lName, String ccNumber,
                                                         String expDate,String cvv2){
                                                             
                                                             Boolean bothTransSuccessfull = false;
                                                             try{ 
                                                             //get Order details
                                                             List<Order> orderList = [SELECT Id,OSIS_Bill_To__r.OSIS_City__c,OSIS_Bill_To__r.OSIS_Country__c,OSIS_Bill_To__r.OSIS_Street__c, 
                                                                                      OSIS_Bill_To__r.OSIS_Postal_Code__c,OSIS_Bill_To__r.OSIS_State__c 
                                                                                      FROM Order 
                                                                                      WHERE SBQQ__Quote__c =:quoteId Limit 1];
                                                                  Order orderRec;
                                                                 if(orderList.size()>0){
                                                                    orderRec = orderList[0];
                                                                 }
                                                             Map<String,String> stateCodeMap = OSIS_UtilityController.getAllPicklistValues('Account','BillingStateCode');                                                
                                                             Map<String,String> CountryCodeMap = OSIS_UtilityController.getAllPicklistValues('Account','BillingCountryCode');                                                 
                                                             String stateCode = '';
                                                             String countryCode = '';
                                                             if(stateCodeMap.get(orderRec.OSIS_Bill_To__r.OSIS_State__c)!=null){
                                                                 stateCode = stateCodeMap.get(orderRec.OSIS_Bill_To__r.OSIS_State__c);                                                   
                                                             }
                                                             if(CountryCodeMap.get(orderRec.OSIS_Bill_To__r.OSIS_Country__c)!=null){
                                                                 countryCode = CountryCodeMap.get(orderRec.OSIS_Bill_To__r.OSIS_Country__c);                                                   
                                                             }                                                
                                                             
                                                             OSIS_PayFlowPro pay = new OSIS_PayFlowPro();
                                                             //Verifiying address through paypal integration                                                
                                                             payRes = pay.verifyAccountDetails(ccNumber,expdate,cvv2,fName,lName,orderRec.OSIS_Bill_To__r.OSIS_Street__c,
                                                                                               orderRec.OSIS_Bill_To__r.OSIS_City__c,stateCode,
                                                                                               countryCode,orderRec.OSIS_Bill_To__r.OSIS_Postal_Code__c);
                                                             if(payRes.result){
                                                                 OSIS_PayFlowPro payFlow = new OSIS_PayFlowPro();
                                                                 //storing address to paypal server              
                                                                 payResponse = payFlow.storeAccountDetails(ccNumber,expdate,cvv2,fName,lName,orderRec.OSIS_Bill_To__r.OSIS_Street__c,
                                                                                                           orderRec.OSIS_Bill_To__r.OSIS_City__c,stateCode,
                                                                                                           countryCode,orderRec.OSIS_Bill_To__r.OSIS_Postal_Code__c);
                                                                 
                                                                 if(payResponse.result){
                                                                     bothTransSuccessfull = true;
                                                                 }
                                                                 //update order field with response
                                                                 orderRec.SBQQ__PaymentTerm__c = 'Pre-Paid Credit Card';
                                                                 orderRec.OSIS_Store_Transaction_Id__c = payResponse.transactionID;
                                                                 orderRec.OSIS_Credit_Card_Processing_Notes__c    = 'Verification ( Result: '+payRes.result
                                                                     +',Result Code: '+payRes.resultCode
                                                                     +',Transaction ID: '+payRes.transactionID
                                                                     +',Response Message: '+payRes.responseMsg+') '+'';
                                                                 orderRec.OSIS_Credit_Card_Processing_Notes__c    = orderRec.OSIS_Credit_Card_Processing_Notes__c + 
                                                                     'Store ( Result: '+payResponse.result
                                                                     +',Result Code: '+payResponse.resultCode
                                                                     +',Transaction ID: '+payResponse.transactionID
                                                                     +',Response Message: '+payResponse.responseMsg+') '+'';
                                                                 update orderRec;
                                                                 
                                                             }
                                                             if(bothTransSuccessfull){
                                                                 return payRes;                                                    
                                                             }else{
                                                                 payRes.result = false;
                                                                 return payRes;
                                                             }  
                                                                  }
                                                             Catch(exception ex){
                                                                 OSIS_CreateErrorLog.logException('OSIS_creditcardcontroller',ex,false);
                                                                 return payRes;
                                                             }
                                                             
                                                        
                                                         }
    
    /**************************************************************************************************
* method: authorizeTransaction
* Description : Method to call paypal integration to authorize CC detials
************************************************************************************************* */
    @AuraEnabled
    public static OSIS_PayPalResponse authorizeTransaction (String quoteId){
        
        OSIS_PayPalResponse authPayResponse = new OSIS_PayPalResponse();
        OSIS_PayPalResponse captureResponse = new OSIS_PayPalResponse();
        
        try{
            List<Order> orderList = [SELECT Id,AccountId,SBQQ__PaymentTerm__c,opportunity.OSIS_PI_Dev_Club_Training_Type__c,
                                     Account.OSIS_Partner_Membership_Status__c,
                                     Account.OSIS_Partner_Onboarding_Stage__c,
                                     Account.OSIS_Customer_Portal_PI_Product_Stage__c,
                                     OSIS_Primary_Contact__c, OSIS_Primary_Contact__r.OSIS_PI_Product_Portal_Stage__c,
                                     OSIS_Store_Transaction_Id__c,OSIS_Status__c,OSIS_Pending_Reasons__c,OSIS_Credit_Card_Processing_Notes__c,OSIS_Total_Order_Amount__c FROM Order 
                                     WHERE SBQQ__Quote__c =:quoteId];  
            
            OSIS_PayFlowPro pay = new OSIS_PayFlowPro();
            if(!orderList.isEmpty()){
                Order OrderRec = orderList[0];
                
                String transId = OrderRec.OSIS_Store_Transaction_Id__c;  
                
                //authorising transcation by passing order amt and transcation Id
                 authPayResponse = pay.authorizeTransaction(String.valueOf('50'),transId);
                // authPayResponse = pay.authorizeTransaction(String.valueOf(orderRec.OSIS_Total_Order_Amount__c),transId);//String.valueOf(orderRec.OSIS_Total_Order_Amount__c*0.1)
                //authPayResponse = pay.authorizeTransaction(String.valueOf(orderRec.OSIS_Total_Order_Amount__c),transId);
                
                orderRec.OSIS_Authorization_Transaction_Id__c = authPayResponse.transactionID;
                orderRec.OSIS_Credit_Card_Processing_Notes__c = orderRec.OSIS_Credit_Card_Processing_Notes__c + 
                    'Authorization ( Result: '+authPayResponse.result
                    +',Result Code: '+authPayResponse.resultCode
                    +',Transaction ID: '+authPayResponse.transactionID
                    +',Response Message: '+authPayResponse.responseMsg+') '+'';   
                
               
                if(orderRec.OSIS_Authorization_Transaction_Id__c != '' && orderRec.OSIS_Authorization_Transaction_Id__c!=null 
                   && !OrderRec.OSIS_Credit_Card_Processing_Notes__c.Contains(Label.CreditCardProcessingNotesError)){
                       System.debug('Auth Transaction Id==> '+orderRec.OSIS_Authorization_Transaction_Id__c);
                       if(!Test.isRunningTest()){
                           captureResponse = pay.captureTransaction(orderRec.OSIS_Authorization_Transaction_Id__c);
                       }
                       
                       if(captureResponse.result && captureResponse.resultCode == '0'){
                           
                           orderRec.OSIS_Credit_Card_Processing_Notes__c = orderRec.OSIS_Credit_Card_Processing_Notes__c + 
                               'Capture ( Result: '+captureResponse.result
                               +',Result Code: '+captureResponse.resultCode
                               +',Transaction ID: '+captureResponse.transactionID
                             // +',Response Message: '+captureResponse.responseMsg+')false ';    
                               +',Response Message: '+captureResponse.responseMsg+') '; 
                       }
                       else{
                            orderRec.OSIS_Status__c = 'New';
                           orderRec.OSIS_Credit_Card_Processing_Notes__c = orderRec.OSIS_Credit_Card_Processing_Notes__c + 
                               'Capture ( Result: '+captureResponse.result
                               +',Result Code: '+captureResponse.resultCode
                               +',Transaction ID: '+captureResponse.transactionID
                               +',Response Message: '+captureResponse.responseMsg+')';    
                       }
                      
                       
                   }
                update orderRec;
                
                If((OrderRec.OSIS_Credit_Card_Processing_Notes__c.Contains(Label.CreditCardProcessingNotesError)
                   && orderRec.SBQQ__PaymentTerm__c == 'Pre-Paid Credit Card') || Test.isRunningTest()){
                       authPayResponse.result=false;
                       authPayResponse.responseMsg='error';
                       Account accRecord;
                       if(OrderRec.opportunity.OSIS_PI_Dev_Club_Training_Type__c!='PPF'){  
                           accRecord = new Account(Id=OrderRec.accountId);
                           if(OrderRec.Account.OSIS_Customer_Portal_PI_Product_Stage__c.contains('Purchase')){
                               accRecord.OSIS_Customer_Portal_PI_Product_Stage__c ='Billing Details - Purchase';    
                           }else if(OrderRec.Account.OSIS_Customer_Portal_PI_Product_Stage__c.contains('Renewal')){
                               accRecord.OSIS_Customer_Portal_PI_Product_Stage__c ='Billing Details - Renewal';    
                           }
                       }
                       if(OrderRec.opportunity.OSIS_PI_Dev_Club_Training_Type__c=='PPF'){  
                           accRecord = new Account(Id=OrderRec.accountId);
                           if(!String.isBlank(OrderRec.Account.OSIS_Partner_Membership_Status__c) 
                              	&& OrderRec.Account.OSIS_Partner_Membership_Status__c.contains('Renewal')){
                               accRecord.OSIS_Partner_Membership_Status__c ='Primary Site - Renewal Open';
                           }
                           else{
                               accRecord.OSIS_Partner_Onboarding_Stage__c='Pay PPF';
                           }
                       }
                       If(!String.isBlank(accRecord.Id)){
                       Update accRecord;
                       }
                           
                       if(orderRec.OSIS_Primary_Contact__r.OSIS_PI_Product_Portal_Stage__c=='Order Summary'){
                           Contact conRec = new Contact();
                           conRec.Id=orderRec.OSIS_Primary_Contact__c;
                           conRec.OSIS_PI_Product_Portal_Stage__c='Billing Details';
                           Update conRec;
                       }
                   }// End here
                
                
            }
        }catch(Exception ex){
            System.debug('Exception is==>'+ex.getMessage()+' Line Number==> '+ex.getLineNumber());
        }
        return authPayResponse;
    }
    
    /**************************************************************************************************
* method: captureTransaction
* Description : Method to call paypal integration to capture CC detials
************************************************************************************************* 
@future(callout=true)
    public static void captureTransaction(String orderId,String transId) {
        OSIS_PayPalResponse capturePayResponse = new OSIS_PayPalResponse();
        try{
            OSIS_PayFlowPro pay = new OSIS_PayFlowPro();
            
            if(!Test.isRunningTest()){
                
                capturePayResponse = pay.captureTransaction(transId);
            }
            
            Order orderInstance = [SELECT Id,OSIS_Credit_Card_Processing_Notes__c FROM Order WHERE Id =:orderId];
            if(capturePayResponse.result && capturePayResponse.resultCode == '0'){
                
                orderInstance.OSIS_Credit_Card_Processing_Notes__c = orderInstance.OSIS_Credit_Card_Processing_Notes__c + 
                    'Capture ( Result: '+capturePayResponse.result
                    +',Result Code: '+capturePayResponse.resultCode
                    +',Transaction ID: '+capturePayResponse.transactionID
                    +',Response Message: '+capturePayResponse.responseMsg+') false';    
                update orderInstance;
            }
            else{
                //Kishore Added
                orderInstance.OSIS_Status__c = 'New';
                //End Modification Kishore
                
                orderInstance.OSIS_Credit_Card_Processing_Notes__c = orderInstance.OSIS_Credit_Card_Processing_Notes__c +
                    'Capture ( Result: '+capturePayResponse.result
                    +',Result Code: '+capturePayResponse.resultCode
                    +',Transaction ID: '+capturePayResponse.transactionID
                    +',Response Message: '+capturePayResponse.responseMsg+') ';  
                
                update orderInstance;
            }
            
        }catch(Exception ex){
            System.debug('Exception is==>'+ex.getMessage()+' Line Number==> '+ex.getLineNumber());
            
        }
    }***/
}